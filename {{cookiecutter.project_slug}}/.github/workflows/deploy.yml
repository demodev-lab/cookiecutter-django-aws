{% raw %}name: Deploy Application

on:
  push:
    branches:
      - main  # main Î∏åÎûúÏπò push Ïãú ÏûêÎèô Î∞∞Ìè¨
  workflow_dispatch:  # ÏàòÎèô Ïã§ÌñâÎèÑ Í∞ÄÎä•

env:
  AWS_REGION: {% endraw %}{{cookiecutter.aws_region}}{% raw %}
  PROJECT_NAME: {% endraw %}{{ cookiecutter.project_slug | replace('_', '-') }}{% raw %}
  ECR_REPOSITORY: {% endraw %}{{ cookiecutter.project_slug | replace('_', '-') }}{% raw %}-demo
  ECS_CLUSTER: {% endraw %}{{ cookiecutter.project_slug | replace('_', '-') }}{% raw %}-cluster-demo
  ECS_SERVICE: {% endraw %}{{ cookiecutter.project_slug | replace('_', '-') }}{% raw %}-service-demo

jobs:
  # Job 0: Ïù∏ÌîÑÎùº Ï°¥Ïû¨ ÌôïÏù∏
  check-infrastructure:
    name: Check Infrastructure
    runs-on: {% endraw %}{{cookiecutter.github_runner}}{% raw %}
    outputs:
      exists: ${{ steps.check.outputs.exists }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check if infrastructure exists
        id: check
        run: |
          echo "üîç Checking if infrastructure exists..."

          # ECR repository Ï°¥Ïû¨ ÌôïÏù∏
          if aws ecr describe-repositories \
            --repository-names ${{ env.ECR_REPOSITORY }} \
            --region ${{ env.AWS_REGION }} 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Infrastructure exists - proceeding with deployment"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è  Infrastructure not found!"
            echo ""
            echo "Please run 'Create AWS Infrastructure' workflow first:"
            echo "  1. Go to Actions tab"
            echo "  2. Select 'Create AWS Infrastructure'"
            echo "  3. Click 'Run workflow'"
            echo ""
            echo "Skipping deployment..."
          fi

  # Job 1: Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú & ECR Ìë∏Ïãú
  build-and-push:
    name: Build and Push Docker Image
    runs-on: {% endraw %}{{cookiecutter.github_runner}}{% raw %}
    needs: check-infrastructure
    if: needs.check-infrastructure.outputs.exists == 'true'
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
      ecr_url: ${{ steps.ecr.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get ECR repository URL
        id: ecr
        run: |
          ECR_URL="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}"
          echo "url=$ECR_URL" >> $GITHUB_OUTPUT
          echo "üì¶ ECR URL: $ECR_URL"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for Docker
        id: meta
        run: |
          IMAGE_TAG=${{ github.sha }}
          echo "tags=${{ steps.ecr.outputs.url }}:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "latest=${{ steps.ecr.outputs.url }}:latest" >> $GITHUB_OUTPUT

      - name: Build Docker image
        working-directory: backend
        run: |
          docker buildx build --platform linux/amd64 --load -t ${{ steps.meta.outputs.tags }} .
          docker tag ${{ steps.meta.outputs.tags }} ${{ steps.meta.outputs.latest }}

      - name: Push Docker image to ECR
        run: |
          docker push ${{ steps.meta.outputs.tags }}
          docker push ${{ steps.meta.outputs.latest }}

      - name: Image digest
        run: echo "‚úÖ Image pushed - ${{ steps.meta.outputs.tags }}"

  # Job 2: ECS ÏÑúÎπÑÏä§ Î∞∞Ìè¨
  deploy:
    name: Deploy to ECS
    runs-on: {% endraw %}{{cookiecutter.github_runner}}{% raw %}
    needs: [check-infrastructure, build-and-push]
    if: needs.check-infrastructure.outputs.exists == 'true'

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Force new ECS deployment
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

          echo "üöÄ Deployment triggered for ${{ env.ECS_SERVICE }}"

      - name: Wait for ECS service to be stable
        run: |
          echo "‚è≥ Waiting for ECS service to stabilize..."
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }}

          echo "‚úÖ ECS service is now stable"

      - name: Get ALB URL
        id: alb
        run: |
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --region ${{ env.AWS_REGION }} \
            --query 'LoadBalancers[?contains(LoadBalancerName, `${{ env.PROJECT_NAME }}`)].DNSName' \
            --output text | head -n1)
          APP_URL="http://${ALB_DNS}"
          echo "url=$APP_URL" >> $GITHUB_OUTPUT
          echo "üåê App URL: $APP_URL"

      - name: Deployment summary
        run: |
          echo "üéâ Deployment completed successfully!"
          echo ""
          echo "üì¶ Image: ${{ needs.build-and-push.outputs.image_tag }}"
          echo "üåê App URL: ${{ steps.alb.outputs.url }}"
          echo "üîß ECS Cluster: ${{ env.ECS_CLUSTER }}"
          echo "üöÄ ECS Service: ${{ env.ECS_SERVICE }}"
          echo ""
          echo "Access your application at:"
          echo "${{ steps.alb.outputs.url }}"

  # Job 3: Î∞∞Ìè¨ ÌõÑ Ìó¨Ïä§Ï≤¥ÌÅ¨
  health-check:
    name: Health Check
    runs-on: {% endraw %}{{cookiecutter.github_runner}}{% raw %}
    needs: [check-infrastructure, deploy]
    if: needs.check-infrastructure.outputs.exists == 'true'

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get ALB URL
        id: alb
        run: |
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --region ${{ env.AWS_REGION }} \
            --query 'LoadBalancers[?contains(LoadBalancerName, `${{ env.PROJECT_NAME }}`)].DNSName' \
            --output text | head -n1)
          APP_URL="http://${ALB_DNS}"
          echo "url=$APP_URL" >> $GITHUB_OUTPUT
          echo "üåê Health check URL: $APP_URL"

      - name: Wait for application to start
        run: sleep 30

      - name: Health check
        run: |
          APP_URL="${{ steps.alb.outputs.url }}"
          MAX_ATTEMPTS=10
          ATTEMPT=1

          echo "üè• Starting health check for $APP_URL"

          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Attempt $ATTEMPT/$MAX_ATTEMPTS..."

            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$APP_URL/admin/" || echo "000")

            if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "302" ] || [ "$HTTP_CODE" = "301" ]; then
              echo "‚úÖ Health check passed! (HTTP $HTTP_CODE)"
              echo ""
              echo "üéä Deployment successful!"
              echo "üåê Application URL: $APP_URL"
              exit 0
            fi

            echo "‚è≥ Received HTTP $HTTP_CODE, retrying in 10 seconds..."
            sleep 10
            ATTEMPT=$((ATTEMPT + 1))
          done

          echo "‚ö†Ô∏è  Health check failed after $MAX_ATTEMPTS attempts"
          echo "Please check ECS logs:"
          echo "aws logs tail /ecs/{% endraw %}{{cookiecutter.project_slug}}{% raw %}-demo --follow"
          exit 1
{% endraw %}
