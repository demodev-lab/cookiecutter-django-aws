services:
  db:
    image: postgres:16
    container_name: {{cookiecutter.project_slug}}_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB={{cookiecutter.project_slug}}
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

{% if cookiecutter.use_celery == "yes" or cookiecutter.use_websocket == "yes" %}
  redis:
    image: redis:7-alpine
    container_name: {{cookiecutter.project_slug}}_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

{% endif %}
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: {{cookiecutter.project_slug}}_backend
    command: uv run python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
{% if cookiecutter.use_celery == "yes" or cookiecutter.use_websocket == "yes" %}
      redis:
        condition: service_healthy
{% endif %}

{% if cookiecutter.use_celery == "yes" %}
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: {{cookiecutter.project_slug}}_celery_worker
    command: uv run celery -A config worker -l info
    volumes:
      - ./backend:/app
    env_file:
      - .env
    depends_on:
      - db
      - redis
      - backend

  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: {{cookiecutter.project_slug}}_celery_beat
    command: uv run celery -A config beat -l info
    volumes:
      - ./backend:/app
    env_file:
      - .env
    depends_on:
      - db
      - redis
      - backend

{% endif %}
{% if cookiecutter.use_websocket == "yes" %}
  websocket:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: {{cookiecutter.project_slug}}_websocket
    command: uv run daphne -b 0.0.0.0 -p 8001 config.asgi:application
    volumes:
      - ./backend:/app
    ports:
      - "8001:8001"
    env_file:
      - .env
    depends_on:
      - db
      - redis

{% endif %}
volumes:
  postgres_data:
